// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	Err(ctx context.Context, in *ErrRequest, opts ...grpc.CallOption) (*ErrResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*Feed, error)
	GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (ApiService_GetFeedsClient, error)
	CreateFeedFollow(ctx context.Context, in *CreateFeedFollowRequest, opts ...grpc.CallOption) (*FeedFollow, error)
	GetFeedFollows(ctx context.Context, in *GetFeedFollowsRequest, opts ...grpc.CallOption) (ApiService_GetFeedFollowsClient, error)
	DeleteFeedFollows(ctx context.Context, in *DeleteFeedFollowsRequest, opts ...grpc.CallOption) (*FeedFollow, error)
	GetPostsForUser(ctx context.Context, in *GetPostsForUserRequest, opts ...grpc.CallOption) (ApiService_GetPostsForUserClient, error)
	View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Err(ctx context.Context, in *ErrRequest, opts ...grpc.CallOption) (*ErrResponse, error) {
	out := new(ErrResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/Err", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ApiService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ApiService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/api.ApiService/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (ApiService_GetFeedsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], "/api.ApiService/GetFeeds", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceGetFeedsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_GetFeedsClient interface {
	Recv() (*Feed, error)
	grpc.ClientStream
}

type apiServiceGetFeedsClient struct {
	grpc.ClientStream
}

func (x *apiServiceGetFeedsClient) Recv() (*Feed, error) {
	m := new(Feed)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) CreateFeedFollow(ctx context.Context, in *CreateFeedFollowRequest, opts ...grpc.CallOption) (*FeedFollow, error) {
	out := new(FeedFollow)
	err := c.cc.Invoke(ctx, "/api.ApiService/CreateFeedFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetFeedFollows(ctx context.Context, in *GetFeedFollowsRequest, opts ...grpc.CallOption) (ApiService_GetFeedFollowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[1], "/api.ApiService/GetFeedFollows", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceGetFeedFollowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_GetFeedFollowsClient interface {
	Recv() (*FeedFollow, error)
	grpc.ClientStream
}

type apiServiceGetFeedFollowsClient struct {
	grpc.ClientStream
}

func (x *apiServiceGetFeedFollowsClient) Recv() (*FeedFollow, error) {
	m := new(FeedFollow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) DeleteFeedFollows(ctx context.Context, in *DeleteFeedFollowsRequest, opts ...grpc.CallOption) (*FeedFollow, error) {
	out := new(FeedFollow)
	err := c.cc.Invoke(ctx, "/api.ApiService/DeleteFeedFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPostsForUser(ctx context.Context, in *GetPostsForUserRequest, opts ...grpc.CallOption) (ApiService_GetPostsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[2], "/api.ApiService/GetPostsForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceGetPostsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_GetPostsForUserClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type apiServiceGetPostsForUserClient struct {
	grpc.ClientStream
}

func (x *apiServiceGetPostsForUserClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	Err(context.Context, *ErrRequest) (*ErrResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	CreateFeed(context.Context, *CreateFeedRequest) (*Feed, error)
	GetFeeds(*GetFeedsRequest, ApiService_GetFeedsServer) error
	CreateFeedFollow(context.Context, *CreateFeedFollowRequest) (*FeedFollow, error)
	GetFeedFollows(*GetFeedFollowsRequest, ApiService_GetFeedFollowsServer) error
	DeleteFeedFollows(context.Context, *DeleteFeedFollowsRequest) (*FeedFollow, error)
	GetPostsForUser(*GetPostsForUserRequest, ApiService_GetPostsForUserServer) error
	View(context.Context, *ViewRequest) (*ViewResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedApiServiceServer) Err(context.Context, *ErrRequest) (*ErrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Err not implemented")
}
func (UnimplementedApiServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedApiServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedApiServiceServer) CreateFeed(context.Context, *CreateFeedRequest) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (UnimplementedApiServiceServer) GetFeeds(*GetFeedsRequest, ApiService_GetFeedsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeeds not implemented")
}
func (UnimplementedApiServiceServer) CreateFeedFollow(context.Context, *CreateFeedFollowRequest) (*FeedFollow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedFollow not implemented")
}
func (UnimplementedApiServiceServer) GetFeedFollows(*GetFeedFollowsRequest, ApiService_GetFeedFollowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeedFollows not implemented")
}
func (UnimplementedApiServiceServer) DeleteFeedFollows(context.Context, *DeleteFeedFollowsRequest) (*FeedFollow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedFollows not implemented")
}
func (UnimplementedApiServiceServer) GetPostsForUser(*GetPostsForUserRequest, ApiService_GetPostsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPostsForUser not implemented")
}
func (UnimplementedApiServiceServer) View(context.Context, *ViewRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Err_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Err(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/Err",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Err(ctx, req.(*ErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateFeed(ctx, req.(*CreateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetFeeds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFeedsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).GetFeeds(m, &apiServiceGetFeedsServer{stream})
}

type ApiService_GetFeedsServer interface {
	Send(*Feed) error
	grpc.ServerStream
}

type apiServiceGetFeedsServer struct {
	grpc.ServerStream
}

func (x *apiServiceGetFeedsServer) Send(m *Feed) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_CreateFeedFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateFeedFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/CreateFeedFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateFeedFollow(ctx, req.(*CreateFeedFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetFeedFollows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFeedFollowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).GetFeedFollows(m, &apiServiceGetFeedFollowsServer{stream})
}

type ApiService_GetFeedFollowsServer interface {
	Send(*FeedFollow) error
	grpc.ServerStream
}

type apiServiceGetFeedFollowsServer struct {
	grpc.ServerStream
}

func (x *apiServiceGetFeedFollowsServer) Send(m *FeedFollow) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_DeleteFeedFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteFeedFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/DeleteFeedFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteFeedFollows(ctx, req.(*DeleteFeedFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPostsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPostsForUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).GetPostsForUser(m, &apiServiceGetPostsForUserServer{stream})
}

type ApiService_GetPostsForUserServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type apiServiceGetPostsForUserServer struct {
	grpc.ServerStream
}

func (x *apiServiceGetPostsForUserServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).View(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ApiService_Healthz_Handler,
		},
		{
			MethodName: "Err",
			Handler:    _ApiService_Err_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ApiService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ApiService_GetUser_Handler,
		},
		{
			MethodName: "CreateFeed",
			Handler:    _ApiService_CreateFeed_Handler,
		},
		{
			MethodName: "CreateFeedFollow",
			Handler:    _ApiService_CreateFeedFollow_Handler,
		},
		{
			MethodName: "DeleteFeedFollows",
			Handler:    _ApiService_DeleteFeedFollows_Handler,
		},
		{
			MethodName: "View",
			Handler:    _ApiService_View_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFeeds",
			Handler:       _ApiService_GetFeeds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFeedFollows",
			Handler:       _ApiService_GetFeedFollows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPostsForUser",
			Handler:       _ApiService_GetPostsForUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

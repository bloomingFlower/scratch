// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HandlerHealthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	HandlerErr(ctx context.Context, in *ErrRequest, opts ...grpc.CallOption) (*ErrResponse, error)
	CheckReadiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	HandlerCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	HandlerGetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	HandlerCreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*Feed, error)
	HandlerGetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (ApiService_HandlerGetFeedsClient, error)
	HandlerCreateFeedFollow(ctx context.Context, in *CreateFeedFollowRequest, opts ...grpc.CallOption) (*FeedFollow, error)
	HandlerGetFeedFollows(ctx context.Context, in *GetFeedFollowsRequest, opts ...grpc.CallOption) (ApiService_HandlerGetFeedFollowsClient, error)
	HandlerDeleteFeedFollows(ctx context.Context, in *DeleteFeedFollowsRequest, opts ...grpc.CallOption) (*FeedFollow, error)
	HandlerGetPostsForUser(ctx context.Context, in *GetPostsForUserRequest, opts ...grpc.CallOption) (ApiService_HandlerGetPostsForUserClient, error)
	HandlerView(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HandlerHealthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerHealthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerErr(ctx context.Context, in *ErrRequest, opts ...grpc.CallOption) (*ErrResponse, error) {
	out := new(ErrResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CheckReadiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/CheckReadiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerGetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerCreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerCreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerGetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (ApiService_HandlerGetFeedsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], "/api.ApiService/handlerGetFeeds", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceHandlerGetFeedsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_HandlerGetFeedsClient interface {
	Recv() (*Feed, error)
	grpc.ClientStream
}

type apiServiceHandlerGetFeedsClient struct {
	grpc.ClientStream
}

func (x *apiServiceHandlerGetFeedsClient) Recv() (*Feed, error) {
	m := new(Feed)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) HandlerCreateFeedFollow(ctx context.Context, in *CreateFeedFollowRequest, opts ...grpc.CallOption) (*FeedFollow, error) {
	out := new(FeedFollow)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerCreateFeedFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerGetFeedFollows(ctx context.Context, in *GetFeedFollowsRequest, opts ...grpc.CallOption) (ApiService_HandlerGetFeedFollowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[1], "/api.ApiService/handlerGetFeedFollows", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceHandlerGetFeedFollowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_HandlerGetFeedFollowsClient interface {
	Recv() (*FeedFollow, error)
	grpc.ClientStream
}

type apiServiceHandlerGetFeedFollowsClient struct {
	grpc.ClientStream
}

func (x *apiServiceHandlerGetFeedFollowsClient) Recv() (*FeedFollow, error) {
	m := new(FeedFollow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) HandlerDeleteFeedFollows(ctx context.Context, in *DeleteFeedFollowsRequest, opts ...grpc.CallOption) (*FeedFollow, error) {
	out := new(FeedFollow)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerDeleteFeedFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandlerGetPostsForUser(ctx context.Context, in *GetPostsForUserRequest, opts ...grpc.CallOption) (ApiService_HandlerGetPostsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[2], "/api.ApiService/handlerGetPostsForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceHandlerGetPostsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_HandlerGetPostsForUserClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type apiServiceHandlerGetPostsForUserClient struct {
	grpc.ClientStream
}

func (x *apiServiceHandlerGetPostsForUserClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) HandlerView(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/handlerView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HandlerHealthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	HandlerErr(context.Context, *ErrRequest) (*ErrResponse, error)
	CheckReadiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	HandlerCreateUser(context.Context, *CreateUserRequest) (*User, error)
	HandlerGetUser(context.Context, *GetUserRequest) (*User, error)
	HandlerCreateFeed(context.Context, *CreateFeedRequest) (*Feed, error)
	HandlerGetFeeds(*GetFeedsRequest, ApiService_HandlerGetFeedsServer) error
	HandlerCreateFeedFollow(context.Context, *CreateFeedFollowRequest) (*FeedFollow, error)
	HandlerGetFeedFollows(*GetFeedFollowsRequest, ApiService_HandlerGetFeedFollowsServer) error
	HandlerDeleteFeedFollows(context.Context, *DeleteFeedFollowsRequest) (*FeedFollow, error)
	HandlerGetPostsForUser(*GetPostsForUserRequest, ApiService_HandlerGetPostsForUserServer) error
	HandlerView(context.Context, *ViewRequest) (*ViewResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HandlerHealthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerHealthz not implemented")
}
func (UnimplementedApiServiceServer) HandlerErr(context.Context, *ErrRequest) (*ErrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerErr not implemented")
}
func (UnimplementedApiServiceServer) CheckReadiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReadiness not implemented")
}
func (UnimplementedApiServiceServer) HandlerCreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerCreateUser not implemented")
}
func (UnimplementedApiServiceServer) HandlerGetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerGetUser not implemented")
}
func (UnimplementedApiServiceServer) HandlerCreateFeed(context.Context, *CreateFeedRequest) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerCreateFeed not implemented")
}
func (UnimplementedApiServiceServer) HandlerGetFeeds(*GetFeedsRequest, ApiService_HandlerGetFeedsServer) error {
	return status.Errorf(codes.Unimplemented, "method HandlerGetFeeds not implemented")
}
func (UnimplementedApiServiceServer) HandlerCreateFeedFollow(context.Context, *CreateFeedFollowRequest) (*FeedFollow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerCreateFeedFollow not implemented")
}
func (UnimplementedApiServiceServer) HandlerGetFeedFollows(*GetFeedFollowsRequest, ApiService_HandlerGetFeedFollowsServer) error {
	return status.Errorf(codes.Unimplemented, "method HandlerGetFeedFollows not implemented")
}
func (UnimplementedApiServiceServer) HandlerDeleteFeedFollows(context.Context, *DeleteFeedFollowsRequest) (*FeedFollow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerDeleteFeedFollows not implemented")
}
func (UnimplementedApiServiceServer) HandlerGetPostsForUser(*GetPostsForUserRequest, ApiService_HandlerGetPostsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method HandlerGetPostsForUser not implemented")
}
func (UnimplementedApiServiceServer) HandlerView(context.Context, *ViewRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerView not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HandlerHealthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerHealthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerHealthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerHealthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerErr(ctx, req.(*ErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CheckReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CheckReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/CheckReadiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CheckReadiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerCreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerGetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerCreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerCreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerCreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerCreateFeed(ctx, req.(*CreateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerGetFeeds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFeedsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).HandlerGetFeeds(m, &apiServiceHandlerGetFeedsServer{stream})
}

type ApiService_HandlerGetFeedsServer interface {
	Send(*Feed) error
	grpc.ServerStream
}

type apiServiceHandlerGetFeedsServer struct {
	grpc.ServerStream
}

func (x *apiServiceHandlerGetFeedsServer) Send(m *Feed) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_HandlerCreateFeedFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerCreateFeedFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerCreateFeedFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerCreateFeedFollow(ctx, req.(*CreateFeedFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerGetFeedFollows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFeedFollowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).HandlerGetFeedFollows(m, &apiServiceHandlerGetFeedFollowsServer{stream})
}

type ApiService_HandlerGetFeedFollowsServer interface {
	Send(*FeedFollow) error
	grpc.ServerStream
}

type apiServiceHandlerGetFeedFollowsServer struct {
	grpc.ServerStream
}

func (x *apiServiceHandlerGetFeedFollowsServer) Send(m *FeedFollow) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_HandlerDeleteFeedFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerDeleteFeedFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerDeleteFeedFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerDeleteFeedFollows(ctx, req.(*DeleteFeedFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandlerGetPostsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPostsForUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).HandlerGetPostsForUser(m, &apiServiceHandlerGetPostsForUserServer{stream})
}

type ApiService_HandlerGetPostsForUserServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type apiServiceHandlerGetPostsForUserServer struct {
	grpc.ServerStream
}

func (x *apiServiceHandlerGetPostsForUserServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_HandlerView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandlerView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/handlerView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandlerView(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handlerHealthz",
			Handler:    _ApiService_HandlerHealthz_Handler,
		},
		{
			MethodName: "handlerErr",
			Handler:    _ApiService_HandlerErr_Handler,
		},
		{
			MethodName: "CheckReadiness",
			Handler:    _ApiService_CheckReadiness_Handler,
		},
		{
			MethodName: "handlerCreateUser",
			Handler:    _ApiService_HandlerCreateUser_Handler,
		},
		{
			MethodName: "handlerGetUser",
			Handler:    _ApiService_HandlerGetUser_Handler,
		},
		{
			MethodName: "handlerCreateFeed",
			Handler:    _ApiService_HandlerCreateFeed_Handler,
		},
		{
			MethodName: "handlerCreateFeedFollow",
			Handler:    _ApiService_HandlerCreateFeedFollow_Handler,
		},
		{
			MethodName: "handlerDeleteFeedFollows",
			Handler:    _ApiService_HandlerDeleteFeedFollows_Handler,
		},
		{
			MethodName: "handlerView",
			Handler:    _ApiService_HandlerView_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handlerGetFeeds",
			Handler:       _ApiService_HandlerGetFeeds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "handlerGetFeedFollows",
			Handler:       _ApiService_HandlerGetFeedFollows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "handlerGetPostsForUser",
			Handler:       _ApiService_HandlerGetPostsForUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
